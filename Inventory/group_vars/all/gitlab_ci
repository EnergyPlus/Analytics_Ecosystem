---

# fully qualified domain name: your.gitlab.domain.example.com
gitlab_fqdn: gitlab
# gitlab_external_url: "https://{{ gitlab_fqdn }}/"
# gitlab_git_data_dir: "/var/opt/gitlab/git-data"

# SSL Configuration.
# gitlab_redirect_http_to_https: "true"
# gitlab_ssl_certificate: "/etc/gitlab/ssl/{{ gitlab_fqdn }}.crt"
# gitlab_ssl_certificate_key: "/etc/gitlab/ssl/{{ gitlab_fqdn }}.key"


# SSL Self-signed Certificate Configuration.
# gitlab_create_self_signed_cert: true
# gitlab_self_signed_cert_subj: "/C=US/ST=Missouri/L=Saint Louis/O=IT/CN=gitlab"

# LDAP Configuration.
# gitlab_ldap_enabled: "false"
# gitlab_ldap_host: "example.com"
# gitlab_ldap_port: "389"
# gitlab_ldap_uid: "sAMAccountName"
# gitlab_ldap_method: "plain"
# gitlab_ldap_bind_dn: "CN=Username,CN=Users,DC=example,DC=com"
# gitlab_ldap_password: "password"
# gitlab_ldap_base: "DC=example,DC=com"

# Probably best to leave this as the default, unless doing testing.
# gitlab_restart_handler_failed_when: 'gitlab_restart.rc != 0'

# Email configuration.
# gitlab_email_enabled: "false"
# gitlab_email_from: 'gitlab@example.com'
# gitlab_email_display_name: 'Gitlab'
# gitlab_email_reply_to: 'gitlab@example.com'


### ---- GITLAB-CI URL VARIABLES --- ###
# GitLab coordinator URL Fully Qualified Domain Name (FQDN)
# gitlab_fqdn: gitlab
# gitlab_external_url: "https://{{ gitlab_fqdn }}"

### ---- GITLAB RUNNER USER VARIABLES --- ###
# gitlab_runner_user: root
# gitlab_runner_group: root

### ---- GITLAB RUNNER CONFIGURATION VARIABLES --- ###

# gitlab_runner_conf_path: /etc/gitlab-runner/
# gitlab_runner_conf_path: '~/.gitlab-runner/'
gitlab_runner_conf_file: config.toml

# Runner tags
gitlab_runner_tags: '["test"]'

## Global section
# Maximum number of jobs to run concurrently
# gitlab_runner_concurrent: 1
# defines in seconds how often to check GitLab for a new builds
# gitlab_runner_check_interval: 600
# enable tracking of all system level errors to sentry
# gitlab_runner_sentry_dsn: ''



##------ [[runners]] ------##
# not used, just informatory
gitlab_runner_name: 'runner_test'
# CI URL
# gitlab_runner_coordinator_url: 'https://{{ gitlab_fqdn }}/ci'
# runner token
gitlab_runner_token: 'zWd4izFohUzGoK8GQmmz'
# select how a project should be built, see next section
# run build locally, default
#   - shell
# run build using Docker container - this requires the presence of
#  [runners.docker] and Docker Engine installed on the system that the Runner
#  runs
#   - docker
# run build using Docker container, but connect to it with SSH - this requires
#  the presence of [runners.docker] , [runners.ssh] and Docker Engine installed
#  on the system that the Runner runs. Note: This will run the docker container
#  on the local machine, it just changes how the commands are run inside that
#  container. If you want to run docker commands on an external machine, then
#  you should change the host parameter in the runners.docker section.
#   - docker-ssh
# run build remotely with SSH - this requires the presence of [runners.ssh]
#   - ssh
# run build using Parallels VM, but connect to it with SSH - this requires the
#  presence of [runners.parallels] and [runners.ssh]
#   - parallels
# run build using VirtualBox VM, but connect to it with SSH - this requires the
#  presence of [runners.virtualbox] and [runners.ssh]
#   - virtualbox
# like docker, but uses auto-scaled docker machines - this requires the
#  presence of [runners.docker] and [runners.machine]
#   - docker+machine
# like docker-ssh, but uses auto-scaled docker machines - this requires the
#  presence of [runners.docker] and [runners.machine]
#   - docker-ssh+machine
gitlab_runner_executor: 'docker'
# limit how many jobs can be handled concurrently by this token. 0 simply means
# don't limit
gitlab_runner_limit: '0'
# file containing the certificates to verify the peer when using HTTPS
# gitlab_runner_tls_path: "~/.gitlab-runner/certs/"
# gitlab_runner_tls_ca_file: "{{ gitlab_runner_tls_path }}/{{ gitlab_fqdn }}.crt"
# whether to verify the TLS certificate when using HTTPS, default: 'false'
gitlab_runner_tls_skip_verify: 'false'
# the name of shell to generate the script (default value is platform dependent)
gitlab_runner_shell: ''
# directory where builds will be stored in context of selected executor
# (Locally, Docker, SSH)
gitlab_runner_builds_dir: ''
# directory where build caches will be stored in context of selected executor
# (Locally, Docker, SSH). If the docker executor is used, this directory needs
# to be included in its volumes parameter.
gitlab_runner_cache_dir: ''
# append or overwrite environment variables
gitlab_runner_environment: '["LC_ALL=en_US.UTF-8"]'
# don't print run commands
gitlab_runner_disable_verbose: 'false'
# set maximum build log size in kilobytes, by default set to 4096 (4MB)
gitlab_runner_output_limit: ''



##------ [runners.docker] ------##
# specify custom Docker endpoint, by default DOCKER_HOST environment is used or
# use this image to run builds
gitlab_runner_docker_image: "ruby:2.1"
# unix:///var/run/docker.sock
# gitlab_runner_docker_host: "runner_docker"
# specify custom hostname for Docker container
# gitlab_runner_docker_hostname: "docker_foo"
# when set it will use ca.pem, cert.pem and key.pem from that folder to make
# secure TLS connection to Docker (useful in boot2docker)
# gitlab_runner_docker_tls_cert_path: ''
# string value containing the cgroups CpusetCpus to use
# gitlab_runner_docker_cpuset_cpus: "0,1"
# a list of DNS servers for the container to use
# gitlab_runner_docker_dns: ''
# a list of DNS search domains
# gitlab_runner_docker_dns_search: ''
# make container run in Privileged mode (insecure)
# gitlab_runner_docker_privileged: 'false'
# add additional Linux capabilities to the container
# gitlab_runner_docker_cap_add: '["NET_ADMIN"]'
# drop additional Linux capabilities from the container
# gitlab_runner_docker_cap_drop: '["DAC_OVERRIDE"]'
# set security options (--security-opt in docker run), takes a list of ':'
# separated key/values
# gitlab_runner_docker_security_opt: ''
# share additional host devices with the container
# gitlab_runner_docker_devices: '["/dev/net/tun"]'
# disable automatic
# gitlab_runner_docker_disable_cache: 'false'
# # specify how long to wait for docker services, set to 0 to disable, default: 30
# gitlab_runner_docker_wait_srv_timeout: 30
# # specify where Docker caches should be stored (this can be absolute or relative
# # to current working directory)
# gitlab_runner_docker_cache_dir: ""
# # specify additional volumes that should be mounted (same syntax as Docker -v
# # option)
# gitlab_runner_docker_volumes: '["/data", "/home/project/cache"]'
# # specify hosts that should be defined in container environment
# gitlab_runner_docker_extra_hosts: '["other-host:127.0.0.1"]'
# # specify containers which should be linked with building container
# gitlab_runner_docker_links: '["mysql_container:mysql"]'
# # specify additional services that should be run with build. Please visit Docker
# # Registry for list of available applications. Each service will be run in
# # separate container and linked to the build.
# gitlab_runner_docker_services: '["mysql", "redis:2.8", "postgres:9"]'
# # specify wildcard list of images that can be specified in .gitlab-ci.yml. If
# # not present all images are allowed (equivalent to ["*/*:*"])
# gitlab_runner_docker_allowed_images: '["ruby:*", "python:*", "php:*"]'
# # specify wildcard list of services that can be specified in .gitlab-ci.yml. If
# # not present all images are allowed (equivalent to ["*/*:*"])
# gitlab_runner_docker_allowed_services: > '["postgres:9.4",
#                                            "postgres:latest"]'
# # specify the image pull policy: never, if-not-present or always (default)
# gitlab_runner_docker_pull_policy: ''
#
#
# ##------ [runners.virtualbox] ------##
# # name of VirtualBox VM which will be cloned
# gitlab_runner_vb_base_name: 'my_vb_runner'
# # name or UUID of a specific snapshot of the VM from which to create a linked
# # clone. If this is empty or omitted, the current snapshot will be used. If
# # there is no current snapshot, one will be created unless disable_snapshots is
# # true, in which case a full clone of the base VM will be made.
# gitlab_runner_vb_base_snapshot: 'snapshot'
# # if disabled the VMs will be destroyed after build
# gitlab_runner_vb_disable_snapshots: 'false'
#
#
# ##------ [runners.ssh] ------##
# # where to connect (overridden when using docker-ssh)
# gitlab_runner_ssh_host: 'gitlab'
# # specify port, default: 22
# gitlab_runner_ssh_port: 22
# # specify user
# gitlab_runner_ssh_user: 'vagrant'
# # specify password
# gitlab_runner_ssh_password: ''
# # specify file path to SSH private key (id_rsa, id_dsa or id_edcsa). The file
# # needs to be stored unencrypted
# gitlab_runner_ssh_identity_file: ''
#
#
# ##------ [runners.machine] ------##
# # Number of machines, that need to be created and waiting in Idle state.
# gitlab_runner_machine_IdleCount: 1
# # Time (in seconds) for machine to be in Idle state before it is removed.
# gitlab_runner_machine_IdleTime: 300
# # Builds count after which machine will be removed.
# gitlab_runner_machine_MaxBuilds: 0
# # Name of the machine. It must contain %s, which will be replaced with a unique
# # machine identifier.
# gitlab_runner_machine_MachineName: 'gitlab-runner-%s'
# # Docker Machine driver to use. More details can be found in the Docker Machine
# # configuration section.
# gitlab_runner_machine_MachineDriver: ''
# # Docker Machine options. More details can be found in the Docker Machine
# # configuration section.
# gitlab_runner_machine_MachineOptions: ''
