---
# tasks file for ansible-role-system_ldap
- name: "Gather OS specific variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
    - "{{ ansible_distribution|lower }}.yml"
    - "{{ ansible_os_family|lower }}.yml"

- name: Install sssd and sssd-ldap
  package:
    name: "{{ item }}"
    state: latest
  with_items: "{{ system_ldap_packages }}"

- name: Copy SSSD configuration file
  template:
    src: sssd.conf.j2
    dest: /etc/sssd/sssd.conf
    mode: 0600
    backup: yes
    owner: root
    group: root
  notify:
    - restart sssd

- name: Query SSSD in nsswitch.conf
  replace:
    dest: /etc/nsswitch.conf
    regexp: '^({{ item }}(?!.*\bsss\b).*)$'
    replace: '\1 sss'
    backup: yes
  with_items:
    - passwd
    - shadow
    - group
    - services
    - netgroup
    - automount

- name: Don't query SSSD for sudoers in nsswitch.conf
  replace:
    dest: /etc/nsswitch.conf
    regexp: '^(sudoers.*)(\bsss)(\b.*)$'
    replace: '\1 \3'
    backup: yes

- name: Query SSSD in pam.d/password-auth-ac
  lineinfile:
    dest: /etc/pam.d/password-auth-ac
    insertbefore: "{{ item.before }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { before: "^auth.*pam_deny.so",
        regexp: "^auth.*pam_sss.so",
        line: "auth        sufficient    pam_sss.so use_first_pass" }
    - { before: "",
        regexp: "^account.*pam_unix.so",
        line: "account     required      pam_unix.so broken_shadow" }
    - { before: "^account.*pam_permit.so",
        regexp: "^account.*pam.sss.so",
        line: "account     [default=bad success=ok user_unknown=ignore] pam_sss.so" }
    - { before: "^password.*pam_deny.so",
        regexp: "^password.*pam_sss.so",
        line: "password    sufficient    pam_sss.so use_authtok" }
    - { before: "^session.*pam_succeed_if.so",
        regexp: "^session.*pam_.*mkhomedir.so",
        line: "session     optional      pam_oddjob_mkhomedir.so umask=0077" }
    - { before: EOF,
        regexp: "^session.*pam_sss.so",
        line: "session     optional      pam_sss.so" }
  when: ansible_os_family == 'RedHat'

- name: Query SSSD in pam.d/system-auth-ac
  lineinfile:
    dest: /etc/pam.d/system-auth-ac
    insertbefore: "{{ item.before }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { before: "^auth.*pam_deny.so",
        regexp: "^auth.*pam_sss.so",
        line: "auth        sufficient    pam_sss.so use_first_pass" }
    - { before: "",
        regexp: "^account.*pam_unix.so",
        line: "account     required      pam_unix.so broken_shadow" }
    - { before: "^account.*pam_permit.so",
        regexp: "^account.*pam.sss.so",
        line: "account     [default=bad success=ok user_unknown=ignore] pam_sss.so" }
    - { before: "^password.*pam_deny.so",
        regexp: "^password.*pam_sss.so",
        line: "password    sufficient    pam_sss.so use_authtok" }
    - { before: "^session.*pam_succeed_if.so",
        regexp: "^session.*pam_.*mkhomedir.so",
        line: "session     optional      pam_oddjob_mkhomedir.so umask=0077" }
    - { before: EOF,
        regexp: "^session.*pam_sss.so",
        line: "session     optional      pam_sss.so" }
  when: ansible_os_family == 'RedHat'

- name: Ensure home directories are created upon login on Debian
  lineinfile:
    dest: /etc/pam.d/common-account
    regexp: 'pam_mkhomedir\.so'
    line: "session required pam_mkhomedir.so skel=/etc/skel/ umask=0022"
    state: present
  when: ansible_os_family == 'Debian'

- name: Start and enable auth services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items: "{{ system_ldap_services }}"

- name: Add LDAP users to sudoers
  template:
    src: ldap_sudo_users.j2
    dest: "/etc/sudoers.d/ldap_sudo_users"
    validate: "visudo -cf %s"

- name: Add LDAP groups to sudoers
  template:
    src: ldap_sudo_groups.j2
    dest: "/etc/sudoers.d/ldap_sudo_groups"
    validate: "visudo -cf %s"

- name: Add pam_mkhomedir for Debian machines
  copy:
    src: pam_mkhomedir
    dest: /usr/share/pam-configs/mkhomedir
  when: ansible_os_family == "Debian"
  notify:
    - run pam auth update

- name: Allow password authentication in SSHD config for users
  blockinfile:
    dest: /etc/ssh/sshd_config
    marker: "# {mark} ANSIBLE SYSTEM LDAP USER BLOCK"
    block: |
      Match user {{ system_ldap_access_filter_users | join(",") }}
      PasswordAuthentication yes
    validate: "/usr/sbin/sshd -T -f '%s'"
  when: "system_ldap_allow_passwordauth_in_sshd and system_ldap_access_filter_users"
  notify:
    - restart sshd

- name: Allow password authentication in SSHD config for groups
  blockinfile:
    dest: /etc/ssh/sshd_config
    marker: "# {mark} ANSIBLE SYSTEM LDAP GROUP BLOCK"
    block: |
      Match group {{ system_ldap_access_unix_groups | join(",") }}
      PasswordAuthentication yes
    validate: "/usr/sbin/sshd -T -f '%s'"
  when: "system_ldap_allow_passwordauth_in_sshd and system_ldap_access_unix_groups"
  notify:
    - restart sshd
